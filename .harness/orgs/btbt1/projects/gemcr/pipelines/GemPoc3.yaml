pipeline:
  name: GemPoc3
  identifier: GemPoc3
  projectIdentifier: gemcr
  orgIdentifier: btbt1
  tags: {}
  stages:
    - stage:
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: <+input>
            serviceInputs: <+input>
          environment:
            environmentRef: <+input>
            deployToAll: false
            environmentInputs: <+input>
            serviceOverrideInputs: <+input>
            infrastructureDefinitions: <+input>
          execution:
            steps:
              - step:
                  type: K8sDryRun
                  name: K8sDryRun_1
                  identifier: K8sDryRun_1
                  spec: {}
                  timeout: 10m
                contextType: StageTemplate
              - step:
                  type: HarnessApproval
                  name: Approve Deployment
                  identifier: HarnessApproval_1
                  when:
                    stageStatus: Success
                    condition: " <+<+stage.variables.manual_check> == \"true\">"
                  spec:
                    approvalMessage: Please review the following dry run log and approve/decline pipeline progression.
                    includePipelineExecutionHistory: true
                    isAutoRejectEnabled: false
                    approvers:
                      userGroups:
                        - <+stage.variables.strategy>
                      minimumCount: 1
                      disallowPipelineExecutor: false
                    approverInputs: []
                  timeout: 1d
                contextType: StageTemplate
              - stepGroup:
                  name: Identify Strategy
                  identifier: Identify_Strategy
                  steps:
                    - step:
                        type: Container
                        name: Get App Name
                        identifier: Get_App_Name
                        spec:
                          connectorRef: account.gcp_ddv_dv_staging_gar
                          image: europe-docker.pkg.dev/dv-sts-psv-tool-svc-bak-08870/staging/bash:5.2.37
                          command: |

                            output=$(echo "$manifest" | grep -o -m 1 'app.kubernetes.io/name:[[:space:]][^[:space:]]*')
                            name=${output#*:}
                            name=$(echo $name | tr -d ' ')
                            export name=$name
                          shell: Bash
                          infrastructure:
                            type: KubernetesDirect
                            spec:
                              connectorRef: <+stage.spec.infrastructure.output.connectorRef>
                              namespace: harness-delegate-ng
                              resources:
                                limits:
                                  cpu: "0.5"
                                  memory: 500Mi
                              annotations: {}
                              labels: {}
                              containerSecurityContext:
                                capabilities:
                                  drop: []
                                  add: []
                              nodeSelector: {}
                              harnessImageConnectorRef: account.harness_ci_addon
                          reports:
                            type: JUnit
                            spec:
                              paths: []
                          outputVariables:
                            - name: name
                          envVariables:
                            manifest: <+pipeline.stages.deploy.spec.execution.steps.K8sDryRun_1.k8s.manifestDryRun>
                        timeout: 10m
                    - step:
                        type: Container
                        name: "Identify Strategy "
                        identifier: Identify_Strategy
                        spec:
                          connectorRef: account.gcp_ddv_dv_staging_gar
                          image: europe-docker.pkg.dev/dv-sts-psv-tool-svc-bak-08870/staging/docker.io/bitnami/kubectl:1.31.3
                          command: |+
                            set -x +e
                            # Returns 1 if existing bluegreen deployment is found
                            kubectl get pod -n $NAMESPACE -l "app.kubernetes.io/name in (${APP_NAME}),harness.io/color in (blue)" | grep "No resources found"

                            result=$?

                            if [ $result -eq 1 ]; then
                                export previous_bg_strategy=true
                            else
                                export previous_bg_strategy=false
                            fi

                          shell: Sh
                          infrastructure:
                            type: KubernetesDirect
                            spec:
                              connectorRef: <+stage.spec.infrastructure.output.connectorRef>
                              namespace: harness-delegate-ng
                              resources:
                                limits:
                                  cpu: "0.5"
                                  memory: 500Mi
                              annotations: {}
                              labels: {}
                              containerSecurityContext:
                                capabilities:
                                  drop: []
                                  add: []
                              nodeSelector: {}
                              serviceAccountName: harness-delegate-sa
                              automountServiceAccountToken: true
                              harnessImageConnectorRef: account.harness_ci_addon
                          reports:
                            type: JUnit
                            spec:
                              paths: []
                          outputVariables:
                            - name: previous_bg_strategy
                          envVariables:
                            NAMESPACE: <+stage.spec.infrastructure.output.namespace>
                            APP_NAME: <+stage.spec.execution.steps.Identify_Strategy.steps.Get_App_Name.ContainerStep.output.outputVariables.name>
                        timeout: 10m
                        when:
                          stageStatus: Success
                      contextType: StageTemplate
                  when:
                    stageStatus: Success
                    condition: " <+<+stage.variables.strategy> == \"bluegreen\">"
              - stepGroup:
                  name: Remove Service
                  identifier: Blue_Green_TroubleshootInitial
                  steps:
                    - step:
                        type: HarnessApproval
                        name: Approve Service Removal
                        identifier: Service_Removal
                        spec:
                          approvalMessage: Strategy switch to blue green detected would you like to delete conflicting k8s services?
                          includePipelineExecutionHistory: true
                          isAutoRejectEnabled: false
                          approvers:
                            userGroups:
                              - <+stage.variables.user_groups>
                            minimumCount: 1
                            disallowPipelineExecutor: false
                          approverInputs: []
                        timeout: 1d
                        when:
                          stageStatus: Success
                    - step:
                        type: K8sDelete
                        name: Remove Service
                        identifier: delete_service
                        spec:
                          deleteResources:
                            type: ManifestPath
                            spec:
                              manifestPaths:
                                - <+stage.variables.service_manifest>
                        timeout: 10m
                        when:
                          stageStatus: Success
                  when:
                    stageStatus: Success
                    condition: <+<+stage.spec.execution.steps.Identify_Strategy.ContainerStep.output.outputVariables.previous_bg_strategy>=="false">
                  variables: []
              - parallel:
                  - step:
                      name: Rollout Deployment
                      identifier: rolloutDeployment
                      type: K8sRollingDeploy
                      timeout: 10m
                      spec:
                        skipDryRun: false
                        pruningEnabled: false
                      when:
                        stageStatus: Success
                        condition: " <+<+stage.variables.strategy> == \"rollout\">"
                  - stepGroup:
                      name: Custom Routing
                      identifier: Custom_Routing
                      steps:
                        - parallel:
                            - step:
                                type: K8sCanaryDeploy
                                name: CanaryCR
                                identifier: K8sCanaryDeploy_1
                                spec:
                                  skipDryRun: false
                                  instanceSelection:
                                    type: Count
                                    spec:
                                      count: <+input>
                                  trafficRouting:
                                    spec:
                                      hosts: <+input>
                                      gateways: <+input>
                                      routes: <+input>
                                      name: <+input>
                                    provider: istio
                                timeout: 10m
                                when:
                                  stageStatus: Success
                                  condition: " <+<+stage.variables.strategy> == \"canary\">"
                            - step:
                                type: K8sBlueGreenDeploy
                                name: BlueGreenCR
                                identifier: K8sBlueGreenDeploy_1
                                spec:
                                  skipDryRun: false
                                  pruningEnabled: false
                                  skipUnchangedManifest: false
                                  trafficRouting:
                                    spec:
                                      hosts: <+input>
                                      gateways: <+input>
                                      routes: <+input>
                                      name: <+input>
                                    provider: istio
                                timeout: 10m
                                when:
                                  stageStatus: Success
                                  condition: " <+<+stage.variables.strategy> == \"bluegreen\">"
                                failureStrategies:
                                  - onFailure:
                                      errors:
                                        - AllErrors
                                      action:
                                        type: MarkAsFailure
                      when:
                        stageStatus: Success
                        condition: " <+<+stage.variables.custom_routing> == \"true\">"
                  - stepGroup:
                      name: No Custom Routing
                      identifier: No_Custom_Routing
                      steps:
                        - parallel:
                            - step:
                                type: K8sCanaryDeploy
                                name: CanaryNOCR
                                identifier: K8sCanaryDeploy_1
                                spec:
                                  skipDryRun: false
                                  instanceSelection:
                                    type: Count
                                    spec:
                                      count: <+input>
                                timeout: 10m
                                when:
                                  stageStatus: Success
                                  condition: " <+<+stage.variables.strategy> == \"canary\">"
                            - step:
                                type: K8sBlueGreenDeploy
                                name: BlueGreenNOCR
                                identifier: K8sBlueGreenDeploy_1
                                spec:
                                  skipDryRun: false
                                  pruningEnabled: false
                                  skipUnchangedManifest: false
                                timeout: 10m
                                when:
                                  stageStatus: Success
                                  condition: " <+<+stage.variables.strategy> == \"bluegreen\">"
                                failureStrategies:
                                  - onFailure:
                                      errors:
                                        - AllErrors
                                      action:
                                        type: MarkAsFailure
                      when:
                        stageStatus: Success
                        condition: " <+<+stage.variables.custom_routing> == \"false\">"
              - step:
                  type: Container
                  name: App Access
                  identifier: App_Access
                  spec:
                    connectorRef: account.gcp_ddv_dv_staging_gar
                    image: europe-docker.pkg.dev/dv-sts-psv-tool-svc-bak-08870/staging/bash:5.2.37
                    command: echo "https://web-dev.c2.lloydsbanking.dev${BASE_PATH}"
                    shell: Sh
                    infrastructure:
                      type: KubernetesDirect
                      spec:
                        connectorRef: account.gcp_ew2_dev_caas_01_standard
                        namespace: harness-delegate-ng
                        resources:
                          limits:
                            cpu: "0.5"
                            memory: 500Mi
                        annotations: {}
                        labels: {}
                        containerSecurityContext:
                          capabilities:
                            drop: []
                            add: []
                        nodeSelector: {}
                        harnessImageConnectorRef: account.harness_ci_addon
                    reports:
                      type: JUnit
                      spec:
                        paths: []
                    outputVariables: []
                    envVariables:
                      BASE_PATH: <+stage.variables.base_path>
                  timeout: 10m
            rollbackSteps:
              - parallel:
                  - step:
                      type: K8sRollingRollback
                      name: K8sRollingRollback_1
                      identifier: K8sRollingRollback_1
                      spec:
                        pruningEnabled: false
                      timeout: 10m
                      when:
                        stageStatus: Success
                        condition: " <+<+stage.variables.strategy> == \"rollout\">"
                  - step:
                      type: K8sCanaryDelete
                      name: K8sCanaryDelete_1
                      identifier: K8sCanaryDelete_1
                      spec: {}
                      timeout: 10m
                      when:
                        stageStatus: Success
                        condition: " <+<+stage.variables.strategy> == \"canary\">"
                  - step:
                      type: K8sBlueGreenStageScaleDown
                      name: K8sBlueGreenStageScaleDown_1
                      identifier: K8sBlueGreenStageScaleDown_1
                      spec:
                        deleteResources: false
                      timeout: 10m
                      when:
                        stageStatus: Success
                        condition: |
                          <+<+stage.variables.strategy> == "bluegreen">
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
        variables:
          - name: strategy
            type: String
            description: Deployment Strategy
            required: true
            value: <+input>.allowedValues(bluegreen,canary,rollout).default(rollout)
          - name: user_groups
            type: String
            description: User Groups required for approvals
            required: false
            value: <+input>
          - name: base_path
            type: String
            description: Base Path
            required: true
            value: <+input>.default(/<+org.identifier>/<+project.identifier>).regex(^\/(?!\/(?:[^\/]+\/)*[^\/]+$)(?!.*\/\/).*)
          - name: service_manifest
            type: String
            description: Path to Service Manifest
            required: false
            value: <+input>
          - name: custom_routing
            type: String
            description: Enabled Custom Routing Options
            required: false
            value: <+input>.allowedValues(true,false).default(false)
          - name: manual_check
            type: String
            description: Enable manual approval after dry runs step
            required: false
            value: <+input>.allowedValues(true,false).default(false)
        name: GCDeploy
        identifier: GCDeploy
        tags: {}
